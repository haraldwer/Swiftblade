#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_DeferredID.si"

#include "Shaders/Lights/SH_Shadows.si"
#include "Shaders/Lights/SH_SSShadows.si"

// TODO: Pack these neater, do all lights in one pass? 
uniform vec3 Position;
uniform vec3 Direction;
uniform vec3 Color;
uniform float Range;
uniform float ConeRadius;
uniform float Intensity;

uniform float Timestamp;
uniform vec3 ShadowPosition;
uniform vec4 ShadowRect;
uniform sampler2D TexShadow;
uniform vec2 FaceTexel;

in vec2 TexCoord;
out vec4 Output;

float Godrays(vec4 InWorldPos, vec3 InToLight)
{
    return 0.0;
}

void main()
{
    vec4 worldPos = SampleWorldPos(TexCoord).xyzw;
    vec3 toLight = Position - worldPos.xyz;
    float lightDistSqr = SquaredLength(toLight);
    
    Output = vec4(0);
    
    if (!CheckID(TexCoord, 0)) // Exclude skybox
        return;
    
    if (lightDistSqr > Range * Range)
        return;

    float lightDist = sqrt(lightDistSqr);    
    float fade = Pow2(1 - lightDist / Range);
    
    vec3 toLightDir = toLight / lightDist;
    vec3 normal = SampleNormal(TexCoord);
    float d = dot(toLightDir, normal);
    if (d < 0)
        return;

    float shadow = 1;
    if (Timestamp != 0)
    {
        vec3 toLightShadow = ShadowPosition - worldPos.xyz;
        shadow = Shadow(toLightShadow, TexShadow, TexCoord, FaceTexel, ShadowRect, Range); 
        if (shadow < 0.001f)
            return;
        shadow = min(shadow, ScreenSpaceShadow(worldPos, Position));
        if (shadow < 0.001f)
            return;
    }
    
    float ao = 1.0 - texture(TexAO, TexCoord).x;
    float intensity = Intensity * pow(d, 0.5) * fade * shadow * ao;
    Output.rgb = Color;
    Output.a = intensity;
    
    //vec3 normal = SampleNormal(TexCoord).xyz;
    //PBRLight(worldPos.xyz, normal, )
    
}
