#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_CubeSampling.si"
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_Random.si"
#include "Shaders/Utility/SH_DeferredID.si"

// TODO: Pack these neater
uniform vec3 Position;
uniform vec3 Direction;
uniform vec3 Color;
uniform float Range;
uniform float ConeRadius;
uniform float Intensity;

uniform float Timestamp;
uniform vec3 ShadowPosition;
uniform vec4 ShadowRect;
uniform sampler2D TexShadow;
uniform vec2 FaceTexel;

in vec2 TexCoord;
out vec4 Output;

#define SOFT_SHADOWS

const int SHADOW_SAMPLES = 8;
const float SHADOW_SAMPLE_SCALE = 11.0f;
const float SHADOW_NOISE_SCALE = 2.0f;
const float SHADOW_DIST_BIAS = 0.05f;
const float SHADOW_DIST_BIAS_MULTIPLIER = 3.0f;

float InterleavedGradientNoise(vec2 uv)
{
    vec3 magic = vec3(0.06711056f, 0.00583715f, 52.9829189f);
    return fract(magic.z * fract(dot(uv, magic.xy)));
}

vec2 VogelDiskSample(int sampleIndex, int samplesCount, float phi)
{
    float GoldenAngle = 2.4f;
    float r = sqrt(sampleIndex + 0.5f) / sqrt(samplesCount);
    float theta = sampleIndex * GoldenAngle + phi;
    return vec2(r * cos(theta), r * sin(theta));
}

float ShadowTest(float InSampleDepth, float InLightDist)
{
    float shadowDiff = InSampleDepth - InLightDist;
    return max(0, (-shadowDiff - SHADOW_DIST_BIAS) * SHADOW_DIST_BIAS_MULTIPLIER);
}

float Shadow(vec3 toLight)
{
    float lightDist = length(toLight);
    vec3 toLightDir = toLight / lightDist;

    #ifdef SOFT_SHADOWS
    
    vec3 right = vec3(toLight.z, toLight.y, -toLight.x);
    vec3 up = vec3(toLight.x, toLight.z, -toLight.y);
    float interleaved = PI * 2.0f * InterleavedGradientNoise(TexCoord * SHADOW_NOISE_SCALE);
    float depth = SampleCubeAtlas(TexShadow, FaceTexel, ShadowRect, -toLightDir).a * Range;
    float shadow = ShadowTest(depth, lightDist);
    vec2 texel = 1 / Resolution;
    for(int i = 1; i < SHADOW_SAMPLES; i++)
    {
        vec2 off = VogelDiskSample(i, SHADOW_SAMPLES, interleaved) * texel * SHADOW_SAMPLE_SCALE;
        vec3 vec = normalize(toLight + right * off.x + up * off.y);
        float shadowDepth = SampleCubeAtlas(TexShadow, FaceTexel, ShadowRect, -vec).a * Range;
        shadow += ShadowTest(shadowDepth, lightDist);
    }
    shadow /= SHADOW_SAMPLES;
    
    #else
    
    float depth = SampleCubeAtlas(TexShadow, FaceTexel, ShadowRect, -toLightDir).a * Range;
    float shadow = ShadowTest(depth, lightDist); 
    
    #endif
    
    return 1.0 - clamp(shadow - 0.5, 0, 1);
}

void main()
{
    if (!CheckID(TexCoord, 0)) // Exclude skybox
        return;
    
    vec4 worldPos = SampleWorldPos(TexCoord).xyzw;
    vec3 toLight = Position - worldPos.xyz;
    float lightDistSqr = SquaredLength(toLight);
    
    if (lightDistSqr > Range * Range)
        discard;

    float lightDist = sqrt(lightDistSqr);    
    float fade = Pow2(1 - lightDist / Range);
    
    vec3 toLightDir = toLight / lightDist;
    vec3 normal = SampleNormal(TexCoord);
    float d = dot(toLightDir, normal);
    if (d < 0)
        discard;

    float shadow = 1;
    if (Timestamp != 0)
    {
        vec3 toLightShadow = ShadowPosition - worldPos.xyz;
        shadow = Shadow(toLightShadow); 
        if (shadow < 0.001f)
            discard;
    }
    
    float intensity = Intensity * pow(d, 0.5) * fade * shadow;
    Output.rgb = Color;
    Output.a = intensity;
}
