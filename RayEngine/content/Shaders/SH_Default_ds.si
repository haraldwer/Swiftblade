
#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Uniforms/SH_DeferredOut.si"

#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_DeferredID.si"

#include "Shaders/PBR/SH_PBR.si"

in vec2 TexCoord;
in vec2 RectCoord;

const float DIST_FADE_START = 20.0f;
const float DIST_FADE_END = 50.0f;
const float FADE_DOT_PART = 0.5f; 

float DistanceFade(float InCameraDistance)
{
    return 1.0f - Saturate((InCameraDistance - DIST_FADE_START) / (DIST_FADE_END - DIST_FADE_START));
}

float SurfaceFade(vec3 InWorldPos, vec3 InNormal)
{
    // Camera distance and dot
    vec3 cameraDifference = CameraPosition - InWorldPos;
    float cameraDistance = length(cameraDifference);
    vec3 cameraDirection = cameraDifference / cameraDistance;
    float cameraDot = dot(cameraDirection, InNormal);

    // Fade
    float cameraDistanceFade = DistanceFade(cameraDistance);
    return mix(cameraDistanceFade, cameraDot * cameraDistanceFade, FADE_DOT_PART);
}

void Unlit(vec3 InColor)
{
    OutAlbedo.rgb = InColor;
    OutAlbedo.a = 1.0f;
    OutSurface.rgb = vec3(0.0f);
    OutSurface.a = 1.0f;
}

void Default(vec3 InAlbedo, vec3 InSurface)
{
    if (CheckID(TexCoord, DeferredID))
        discard;

    OutAlbedo.rgb = InAlbedo;
    OutAlbedo.a = 0.0f;
    
    OutSurface.rgb = InSurface;
    OutSurface.a = 1.0f;
    OutSurface.b *= SampleAO(TexCoord);
}

void DefaultMatte(vec3 InAlbedo)
{
    Default(InAlbedo, vec3(0.0f, 1.0f, 1.0f));
}

void DefaultMetal(vec3 InAlbedo)
{
    Default(InAlbedo, vec3(1.0f, 1.0f, 1.0f));
}

void DefaultShiny(vec3 InAlbedo)
{
    Default(InAlbedo, vec3(0.0f, 0.0f, 1.0f));
}