
#include "Shaders/Utility/SH_ScreenDistortion.si"

const float PI = 3.1415926535f;

vec2 WorldPosToCoord(vec3 InWorldPosition, mat4 InMVP)
{    
    vec4 screenPos = InMVP * vec4(InWorldPosition, 1.0);
    vec2 coord = (1 + screenPos.xy / screenPos.w) / 2;
    return DistortCoord(coord);
}

vec2 GetPrevCoord(vec3 InWorldPosition)
{
    return WorldPosToCoord(InWorldPosition, ViewProjPrev);
}

float SquaredLength(vec2 InDist)
{
    return InDist.x * InDist.x + InDist.y * InDist.y;
}

float SquaredLength(vec3 InDist)
{
    return InDist.x * InDist.x + InDist.y * InDist.y + InDist.z * InDist.z;
}

float SquaredLength(vec4 InDist)
{
    return InDist.x * InDist.x + InDist.y * InDist.y + InDist.z * InDist.z + InDist.w * InDist.w;
}

float Pow2(float InValue)
{
    return InValue * InValue;
}

vec4 WorldPosToTex(vec4 InPos)
{
    return vec4(InPos.xyz - CameraPosition, InPos.w);
}

vec3 GetViewDir(vec2 InUV)
{
    vec2 coord = InUV * 2 - 1;
    vec3 off = vec3(coord, 1.0f);
    vec4 dir = ScreenToWorld * vec4(off, 1.0f);
    return normalize(dir.xyz);
}

// Spheres and octahedrons
// https://gamedev.stackexchange.com/questions/169508/octahedral-impostors-octahedral-mapping

vec3 UVtoOctahedronDir(vec2 InUV)
{
    // Unpack the 0...1 range to the -1...1 unit square.
    vec2 uv = InUV * 2.0f - 1.0f;
    vec3 position = vec3(uv.x, 0.0f, uv.y);

    // "Lift" the middle of the square to +1 z, and let it fall off linearly
    // to z = 0 along the Manhattan metric diamond (absolute.x + absolute.y == 1),
    // and to z = -1 at the corners where position.x and .y are both = +-1.
    vec2 absolute = abs(position.xy);
    position.y = 1.0f - absolute.x - absolute.y;

    // "Tuck in" the corners by reflecting the xy position along the line y = 1 - x
    // (in quadrant 1), and its mirrored image in the other quadrants.
    if(position.y < 0)
    {
        position.xz = sign(position.xz) * vec2(1.0f - absolute.y, 1.0f - absolute.x);
    }

    return position;
}

vec2 OctahedronDirToUV(vec3 InDir)
{
    vec3 octant = sign(InDir);

    // Scale the vector so |x| + |y| + |z| = 1 (surface of octahedron).
    float sum = dot(InDir, octant);
    vec3 octahedron = InDir / sum;

    // "Untuck" the corners using the same reflection across the diagonal as before.
    // (A reflection is its own inverse transformation).
    if(octahedron.y < 0) 
    {
        vec3 absolute = abs(octahedron);
        octahedron.xz = octant.xz * vec2(1.0f - absolute.z, 1.0f - absolute.x);
    }

    return octahedron.xy * 0.5f + 0.5f;
}

vec4 SampleOct(sampler2D InSampler, vec3 InDir)
{
    return texture(InSampler, OctahedronDirToUV(InDir));
}
