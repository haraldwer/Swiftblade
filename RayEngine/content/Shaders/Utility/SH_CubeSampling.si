

// Atlas cube sampling

vec3 GetFlatCubeUV(vec3 InDir)
{
    //Vector Parallel to the unit vector that lies on one of the cube faces
    float a = max(abs(InDir.x), max(abs(InDir.y), abs(InDir.z)));
    float xa = InDir.x / a;
    float ya = InDir.y / a;
    float za = InDir.z / a;

    vec2 uv;
    float side;

    if (xa > 0.999)
    {
        // Right, index 0, rotate left
        side = 0;
        uv = vec2(-ya, za);
    }
    else if (xa < -0.999)
    {
        // Left, index 1, rotate right
        side = 1;
        uv = vec2(ya, za);
    }

    else if (ya > 0.999)
    {
        // Up, index 2, upside down and flipped
        side = 2;
        uv = vec2(xa, za);
    }

    else if (ya < -0.999)
    {
        // Down, index3, correct
        side = 3;
        uv = vec2(xa, -za);
    }

    else if (za > 0.999)
    {
        // Forwards, index4, correct
        side = 4;
        uv = vec2(xa, -ya);
    }
    else
    {
        // Backwards, index4, correct
        side = 5;
        uv = vec2(-xa, -ya);
    }
    
    uv = (uv + 1) * 0.5;
    uv = clamp(uv, 0, 1);
    return vec3(uv, side);
}

vec2 GetCubeAtlasUV(vec2 InFaceTexel, vec4 InRect, vec3 InDir)
{
    vec3 uv = GetFlatCubeUV(InDir);

    vec2 faceUV = InRect.zw * uv.xy;
    faceUV = clamp(faceUV, InFaceTexel * 2, InRect.zw - InFaceTexel * 2);
    faceUV += InRect.xy;
    faceUV.x += InRect.z * uv.z; // Add face index

    float fl = floor(faceUV.x);
    faceUV.y += fl * InRect.w;
    faceUV.x -= fl;
    return faceUV;
}

vec4 SampleCubeAtlas(sampler2D InAtlas, vec2 InFaceTexel, vec4 InRect, vec3 InDir)
{
    return texture(InAtlas, GetCubeAtlasUV(InFaceTexel, InRect, InDir));
}

vec4 SampleCubeAtlasMip(sampler2D InAtlas, vec2 InFaceTexel, vec4 InRect, vec3 InDir, int InMip)
{
    return texture(InAtlas, GetCubeAtlasUV(InFaceTexel, InRect, InDir));
}

// Spheres and octahedrons
// https://gamedev.stackexchange.com/questions/169508/octahedral-impostors-octahedral-mapping

vec3 UVtoOctahedronDir(vec2 InUV)
{
    // Unpack the 0...1 range to the -1...1 unit square.
    vec2 uv = InUV * 2.0f - 1.0f;
    vec3 position = vec3(uv.x, 0.0f, uv.y);

    // "Lift" the middle of the square to +1 z, and let it fall off linearly
    // to z = 0 along the Manhattan metric diamond (absolute.x + absolute.y == 1),
    // and to z = -1 at the corners where position.x and .y are both = +-1.
    vec2 absolute = abs(position.xy);
    position.y = 1.0f - absolute.x - absolute.y;

    // "Tuck in" the corners by reflecting the xy position along the line y = 1 - x
    // (in quadrant 1), and its mirrored image in the other quadrants.
    if(position.y < 0)
    {
        position.xz = sign(position.xz) * vec2(1.0f - absolute.y, 1.0f - absolute.x);
    }

    return position;
}

vec2 OctahedronDirToUV(vec3 InDir)
{
    vec3 octant = sign(InDir);

    // Scale the vector so |x| + |y| + |z| = 1 (surface of octahedron).
    float sum = dot(InDir, octant);
    vec3 octahedron = InDir / sum;

    // "Untuck" the corners using the same reflection across the diagonal as before.
    // (A reflection is its own inverse transformation).
    if(octahedron.y < 0)
    {
        vec3 absolute = abs(octahedron);
        octahedron.xz = octant.xz * vec2(1.0f - absolute.z, 1.0f - absolute.x);
    }

    return octahedron.xy * 0.5f + 0.5f;
}

vec4 SampleOct(sampler2D InSampler, vec3 InDir)
{
    return texture(InSampler, OctahedronDirToUV(InDir));
}

