
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_CubeSampling.si"

// From LearnOpenGL
// https://learnopengl.com/PBR/Lighting

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = Pow2(roughness);
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
    
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    
    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    
    return num / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
    
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

// Surface: 
// r = metallic 
// g = roughness 
// b = ao
vec3 PBR(vec3 albedo, vec3 surface)
{
    vec3 N = normalize(Normal);
    vec3 V = normalize(camPos - WorldPos);
    
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, surface.r);
    
    // For each light
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i)
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance    = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance     = lightColors[i] * attenuation;
        
        // cook-torrance brdf
        float NDF = DistributionGGX(N, H, surface.g);
        float G   = GeometrySmith(N, V, L, surface.g);
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
        
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - surface.r;
        
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular     = numerator / denominator;
        
        // add to outgoing radiance Lo
        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }


    // Ambient color
    vec3 kS = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    vec3 kD = 1.0 - kS;
    vec3 irradiance = texture(irradianceMap, N).rgb;
    vec3 diffuse    = irradiance * albedo;
    vec3 ambient    = (kD * diffuse) * ao;

    // Collect
    vec3 color = ambient + Lo;
    
    // Linear to HDR
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));
    
    return color;
}

// From LearnOpenGL diffuse irradiance

vec3 ConvoluteIrradiance()
{
    vec3 irradiance = vec3(0.0);
    
    vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up         = normalize(cross(normal, right));
    
    float sampleDelta = 0.025;
    float nrSamples = 0.0;
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;
            
            irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    return PI * irradiance * (1.0 / float(nrSamples));
}

// From LearnOpenGL specular IBL

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

float VanDerCorput(uint n, uint base)
{
    float invBase = 1.0 / float(base);
    float denom   = 1.0;
    float result  = 0.0;

    for(uint i = 0u; i < 32u; ++i)
    {
        if(n > 0u)
        {
            denom   = mod(float(n), 2.0);
            result += denom * invBase;
            invBase = invBase / 2.0;
            n       = uint(float(n) / 2.0);
        }
    }

    return result;
}

// Alternative for opengl with no bit operator support
vec2 HammersleyNoBitOps(uint i, uint N)
{
    return vec2(float(i)/float(N), VanDerCorput(i, 2u));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

vec3 N = normalize(w_o);
vec3 R = N;
vec3 V = R;

float lod             = getMipLevelFromRoughness(roughness);
vec3 prefilteredColor = textureCubeLod(PrefilteredEnvMap, refVec, lod);
vec2 envBRDF          = texture2D(BRDFIntegrationMap, vec2(NdotV, roughness)).xy;
vec3 indirectSpecular = prefilteredColor * (F * envBRDF.x + envBRDF.y);

const uint SAMPLE_COUNT = 1024u;

void main()
{
    vec3 N = normalize(localPos);
    vec3 R = N;
    vec3 V = R;
    
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);
        
        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += texture(environmentMap, L).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;
    
    FragColor = vec4(prefilteredColor, 1.0);
}







// From CodingLabs
// http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx
/*

float ChiGGX(float v)
{
    return v > 0 ? 1 : 0;
}

float GGX_Distribution(vec3 n, vec3 h, float alpha)
{
    float NoH = dot(n,h);
    float alpha2 = alpha * alpha;
    float NoH2 = NoH * NoH;
    float den = NoH2 * alpha2 + (1 - NoH2);
    return (ChiGGX(NoH) * alpha2) / ( PI * den * den );
}

float GGX_PartialGeometryTerm(vec3 v, vec3 n, vec3 h, float alpha)
{
    float VoH2 = clamp(dot(v,h), 0, 1);
    float chi = ChiGGX( VoH2 / clamp(dot(v,n), 0, 1) );
    VoH2 = VoH2 * VoH2;
    float tan2 = ( 1 - VoH2 ) / VoH2;
    return (chi * 2) / ( 1 + sqrt( 1 + alpha * alpha * tan2 ) );
}

vec3 Fresnel_Schlick(float cosT, vec3 F0)
{
    float c = 1 - cosT;
    return F0 + (1 - F0) * (c * c * c * c * c);
}

vec3 F0_Approx(vec3 InAlbedo, float InMetallic, float InR) // TODO: What's surface.r?
{
    // Calculate colour at normal incidence
    float ior = 1 + InR;
    vec3 F0 = vec3(abs((1.0 - ior) / (1.0 + ior)));
    F0 = F0 * F0;
    F0 = mix(F0, InAlbedo, InMetallic);
    return F0;
}

const int SAMPLES = 16;
const int MIP_COUNT = 4;


vec3 GGX_Specular(sampler2D InTexSpecular, vec2 InFaceTexel, vec4 InRect, vec3 normal, vec3 viewVector, float roughness, vec3 F0, out vec3 kS)
{
    vec3 reflectionVector = reflect(-viewVector, normal);
    mat3x3 worldFrame = GenerateFrame(reflectionVector);
    vec3 radiance = vec3(0);
    float NoV = clamp(dot(normal, viewVector), 0, 1);

    for(int i = 0; i < SAMPLES; ++i)
    {
        // Generate a sample vector in some local space
        vec3 sampleVector = GenerateGGXsampleVector(i, SAMPLES, roughness);
        // Convert the vector in world space
        sampleVector = normalize(sampleVector * worldFrame);

        // Calculate the half vector
        vec3 halfVector = normalize(sampleVector + viewVector);
        float cosT = clamp(dot( sampleVector, normal), 0, 1);
        float sinT = sqrt( 1 - cosT * cosT);

        // Calculate fresnel
        vec3 fresnel = Fresnel_Schlick(clamp(dot(halfVector, viewVector), 0, 1), F0);
        // Geometry term
        float ggx_partialView = GGX_PartialGeometryTerm(viewVector, normal, halfVector, roughness);
        float ggx_partialSample = GGX_PartialGeometryTerm(sampleVector, normal, halfVector, roughness); 
        float geometry = ggx_partialView * ggx_partialSample; 
        // Calculate the Cook-Torrance denominator
        float denominator = clamp(4 * (NoV * clamp(dot(halfVector, normal), 0, 1) + 0.05), 0, 1);
        kS += fresnel;
        
        // Accumulate the radiance
        vec3 tex = SampleCubeAtlasMip(InTexSpecular, InFaceTexel, InRect, sampleVector, (roughness * MIP_COUNT));
        radiance += tex * geometry * fresnel * sinT / denominator;
    }

    // Scale back for the samples count
    kS = clamp(kS / SAMPLES, 0, 1);
    return radiance / SAMPLES;
}

vec3 Specular(vec3 InColor, float InRoughness, float InMetallic, vec3 InNormal, vec3 InViewVec, out vec3 kd)
{
    // Calculate colour at normal incidence
    vec3 F0 = F0_Approx(InColor, InMetallic, surface.r);

    // Calculate the specular contribution
    vec3 ks = vec3(0);
    vec3 specular = GGX_Specular(TexSpec, FaceTexel, Rect, InNormal, InViewVec, InRoughness, F0, ks );
    kd = (1 - ks) * (1 - InMetallic);
    return specular;
}

vec3 Diffuse(vec3 InColor, vec3 InNormal)
{
    // Calculate the diffuse contribution
    vec3 irradiance = SampleCubeAtlas(TexDiff, FaceTexel, Rect, InNormal).rgb;
    return InColor * irradiance;
}

vec3 PBR(vec3 InColor, float InRoughness, float InMetallic, vec3 InNormal, vec3 InViewVec)
{
    float roughness = clamp(InRoughness - EPSILON, 0, 1) + EPSILON;
    vec3 kd = vec3(0);
    
    vec3 specular = Specular(InColor, roughness, InMetallic, InNormal, InViewVec, kd);
    vec3 diffuse = Diffuse(InColor, InNormal);
    return vec3(kd * diffuse + specular, 1);
}
*/