#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_HSV.si"
#include "Shaders/Utility/SH_CubeSampling.si"
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_Random.si"
#include "Shaders/Utility/SH_DeferredID.si"

#define MAX_PROBES 15

uniform float[MAX_PROBES] Timestamp;
uniform vec3[MAX_PROBES] ProbePosition;
uniform vec4[MAX_PROBES] ProbeRect;

uniform int ProbeCount;
uniform float ProbeRange;
uniform sampler2D TexLumin;
uniform vec2 TexLuminRes;

in vec2 TexCoord;
layout (location = 0) out vec4 Output;

const float DIST_BIAS = 1.0f;
const float DIST_FADE = 4.0f;
const float NORMAL_BIAS = 0.1f;

vec4 SampleProbe(int InIndex, vec3 InWorldPos, vec3 InNormal)
{
    vec3 pos = ProbePosition[InIndex];
    float timestamp = Timestamp[InIndex]; 
    vec4 rect = ProbeRect[InIndex];
    
    // Distance fade
    vec3 pixelToProbe = InWorldPos - pos;
    vec3 range = abs(pixelToProbe) / ProbeRange;
    float dist = max(max(range.x, range.y), range.z);
    float distFade = 1.0f - Saturate(dist); // Fade based on distance
    if (distFade < 0.001f)
        return vec4(0.0f);
    
    float squareProbeRange = sqrt(Pow2(ProbeRange) * 3.0f);
    float pixelToProbeDist = length(pixelToProbe);
    vec3 pixelToProbeDir = pixelToProbe / pixelToProbeDist;
        
    // Is surface in view of probe?
    float depth = SampleCubeAtlas(TexLumin, TexLuminRes, rect, pixelToProbeDir).a * ProbeRange * 2.0f;
    float depthDiff = max(0.0f, pixelToProbeDist - depth);
    float depthVal = (abs(depthDiff) - DIST_BIAS) / DIST_FADE;
    float depthFade = 1.0f - Saturate(depthVal);
    if (depthFade < 0.001f)
        return vec4(0.0f);
    
    // Is surface pointing towards probe?
    vec3 normal = SampleNormal(TexCoord);
    float surfaceDot = -dot(pixelToProbeDir, normal);
    float surfaceFade = clamp((surfaceDot + NORMAL_BIAS) / NORMAL_BIAS, 0.0f, 1.0f);
    surfaceFade = pow(surfaceFade, 0.5f);
    if (surfaceFade < 0.001f)
        return vec4(0.0f);
    
    vec3 color = vec3(0.0f);
    color += SampleCubeAtlas(TexLumin, TexLuminRes, rect, -InNormal).rgb;
    color += SampleCubeAtlas(TexLumin, TexLuminRes, rect, InNormal).rgb;
    color += SampleCubeAtlas(TexLumin, TexLuminRes, rect, -pixelToProbeDir).rgb;
    color += SampleCubeAtlas(TexLumin, TexLuminRes, rect, pixelToProbeDir).rgb;
    color /= float(4);
    color *= depthFade * distFade * surfaceFade;
    return vec4(color, depthFade * distFade);
}

void main()
{
    if (!CheckID(TexCoord, 0.0f)) // Exclude skybox
        discard;
    
    vec3 worldPos = SampleWorldPos(TexCoord).xyz;
    vec3 normal = SampleNormal(TexCoord);
    
    vec4 result = vec4(0.0f);
    for (int i = 0; i < min(ProbeCount, MAX_PROBES); i++)
        result += SampleProbe(i, worldPos, normal);
    if (result.a < 0.001f)
        discard;
    
    result.rgb /= result.a;
    vec3 hsv = rgb2hsv(result.rgb);
    hsv.z = min(1.0f, Pow2(hsv.z));
    Output.rgb = hsv2rgb(hsv);
    Output.a = 1.0f;
}