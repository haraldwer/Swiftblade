#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_Random.si"
#include "Shaders/Utility/SH_CubeSampling.si"

in vec2 TexCoord;
in vec2 RectCoord;
out vec4 Output;

const int SAMPLES = 64;
const float SAMPLE_SCALE = 0.5f;    
const float NOISE_SCALE = 1234.0f;

float InterleavedGradientNoise(vec2 uv)
{
    vec3 magic = vec3(0.06711056f, 0.00583715f, 52.9829189f);
    return fract(magic.z * fract(dot(uv, magic.xy)));
}

vec2 VogelDiskSample(int sampleIndex, int samplesCount, float phi)
{
    float GoldenAngle = 2.4f;
    float r = sqrt(sampleIndex + 0.5f) / sqrt(samplesCount);
    float theta = sampleIndex * GoldenAngle + phi;
    return vec2(r * cos(theta), r * sin(theta));
}

// Monte carlo estimator for calculating irradiance
// http://www.codinglabs.net/article_physically_based_rendering.aspx

void main()
{
    vec2 texel = vec2(0);
    
    vec3 worldPos = SampleWorldPos(TexCoord).xyz;
    vec3 camDiff = CameraPosition - worldPos.xyz;
    float camDist = length(camDiff);
    vec3 camDir = camDiff / camDist;
    
    vec3 right = cross(camDir, vec3(0, 1, 0));
    vec3 up = cross(camDir, right);
    float interleaved = PI * 2.0f * InterleavedGradientNoise(TexCoord * NOISE_SCALE);
    
    float total = 1;
    vec4 result = vec4(0);
    result.xyz += SampleCubeAtlas(TexFrame, texel, RefRect, -camDir).xyz;
    result.w += SampleCubeAtlas(TexPosition, texel, RefRect, -camDir).w;
    for(int i = 1; i < SAMPLES; i++)
    {
        vec2 off = VogelDiskSample(i, SAMPLES, interleaved) * SAMPLE_SCALE;
        vec3 vec = normalize(camDir + right * off.x + up * off.y);
        float weight = max(0, dot(vec, camDir));
        result.xyz += SampleCubeAtlas(TexFrame, texel, RefRect, -vec).xyz * weight;
        result.w += SampleCubeAtlas(TexPosition, texel, RefRect, -vec).w * weight;
        total += weight;   
    }
    result /= total;
    result.a /= NearFar.y;
    Output = result;
}
