
#include "Shaders/PBR/SH_PBR_Common.si"

// https://learnopengl.com/PBR/IBL/Specular-IBL

const uint BRDF_SAMPLE_COUNT = 1024u;

// Use to create a LUT for BRDF
// Based on NdotV and Roughness
// Texture can be stored to disk
vec2 IntegrateBRDF(float InNdotV, float InRoughness)
{
    vec3 V;
    V.x = sqrt(1.0f - Pow2(InNdotV));
    V.y = 0.0f;
    V.z = InNdotV;

    float A = 0.0f;
    float B = 0.0f;

    vec3 N = vec3(0.0f, 0.0f, 1.0f);

    for(uint i = 0u; i < BRDF_SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, BRDF_SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, InRoughness);
        vec3 L  = normalize(2.0f * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0f);
        float NdotH = max(H.z, 0.0f);
        float VdotH = max(dot(V, H), 0.0f);

        if(NdotL > 0.0f)
        {
            float G = GeometrySmith(N, V, L, InRoughness);
            float G_Vis = (G * VdotH) / (NdotH * InNdotV);
            float Fc = pow(1.0f - VdotH, 5.0f);

            A += (1.0f - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(BRDF_SAMPLE_COUNT);
    B /= float(BRDF_SAMPLE_COUNT);
    return vec2(A, B);
}
