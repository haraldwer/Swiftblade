
#include "Shaders/Utility/SH_CubeSampling.si"
#include "Shaders/PBR/SH_PBR_Common.si"

// https://learnopengl.com/PBR/IBL/Specular-IBL

const uint FILTER_SAMPLE_COUNT = 256u;

vec3 Prefilter(sampler2D InEnv, vec2 InFaceTexel, vec4 InRect, vec3 InDir, float InRoughness)
{
    vec3 N = InDir;
    vec3 R = N;
    vec3 V = R;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for(uint i = 0u; i < FILTER_SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, FILTER_SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, InRoughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);
        
        // A solution to bright dots (requires mips)
        //float NdotH = dot(N, H);
        //float HdotV = dot(H, V);
        //float D   = DistributionGGX(NdotH, InRoughness); // Should maybe be DistributionGGX??
        //float pdf = (D * NdotH / (4.0 * HdotV)) + 0.0001;

        //float saTexel  = 4.0 * PI / (6.0 * Pow2(EnvResolution));
        //float saSample = 1.0 / (float(FILTER_SAMPLE_COUNT) * pdf + 0.0001);
        //float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += SampleCubeAtlas(InEnv, InFaceTexel, InRect, L).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    return prefilteredColor / totalWeight;
}

