
#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/PBR/SH_PBR_Common.si"
#include "Shaders/Lumin/SH_LuminSample.si"

// From LearnOpenGL
// https://learnopengl.com/PBR/Lighting

const float MAX_REFLECTION_LOD = 4.0;

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 PBR(vec3 InWorldPos, vec3 InNormal, vec3 InAlbedo, vec3 InSurface)
{
    float metallic = InSurface.r;
    float roughness = InSurface.g;
    float ao = InSurface.b;
    
    vec3 N = normalize(InNormal);
    vec3 V = normalize(CameraPosition - InWorldPos);
    vec3 R = reflect(-V, N);
    
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, InAlbedo, metallic);
    
    // Calculate fresnel from view vector
    vec3 F = FresnelSchlickRoughness(max(dot(N, V), 0), F0, roughness);
    vec3 kD = vec3(1) - F; // kS = F
    kD *= 1 - metallic;

    // Get lumin probe
    ProbeData probe = GetProbe(InWorldPos, InNormal);
    
    // Get irradiance
    vec3 irradiance = SampleIrradiance(probe, N).rgb;
    vec3 diffuse    = irradiance * InAlbedo;

    // Get specular using BRDF
    int mip = int(roughness * MAX_REFLECTION_LOD);
    vec3 prefilteredColor = SamplePrefilter(probe, R, mip).rgb;
    vec2 envBRDF  = SampleBRDF(N, V, roughness);
    vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);

    // Add diffuse and specular
    return (kD * diffuse + specular) * ao;
}
