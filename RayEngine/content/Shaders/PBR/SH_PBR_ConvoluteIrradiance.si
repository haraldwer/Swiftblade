
#include "Shaders/Utility/SH_CubeSampling.si"
#include "Shaders/PBR/SH_PBR_Common.si"

// https://learnopengl.com/PBR/IBL/Diffuse-irradiance

const float IRRADIANCE_SAMPLE_DELTA = 0.1f;

vec3 ConvoluteIrradiance(sampler2D InEnv, vec2 InFaceTexel, vec4 InRect, vec3 InDir)
{
    vec3 N = normalize(InDir);
    vec3 irradiance = vec3(0.0f);
    
    vec3 up    = vec3(0.0f, 1.0f, 0.0f);
    vec3 right = normalize(cross(up, N));
    up         = normalize(cross(N, right));

    float nrSamples = 0.0f;
    for(float phi = 0.0f; phi < 2.0f * PI; phi += IRRADIANCE_SAMPLE_DELTA)
    {
        for(float theta = 0.0f; theta < 0.5f * PI; theta += IRRADIANCE_SAMPLE_DELTA)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;

            irradiance += SampleCubeAtlas(InEnv, InFaceTexel, InRect, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    return PI * irradiance * (1.0f / nrSamples);
}