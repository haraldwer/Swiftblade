
#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/PBR/SH_PBR_Common.si"

// From LearnOpenGL
// https://learnopengl.com/PBR/Lighting

const float MAX_REFLECTION_LOD = 4.0f;

float AttenuationFunction(float InDistance, float InRange)
{
    return Pow2(Pow2(1.0f - InDistance / InRange)); // Realistic attenuation: 1 / Pow2(distance);
}

// PBR equation for per-light radiance
vec3 PBRLight(vec3 InWorldPos, vec3 InNormal, vec3 InAlbedo, vec3 InSurface, vec3 InLightPos, vec3 InLightColor, float InLightRange)
{
    float metallic = InSurface.r;
    float roughness = InSurface.g;
    float ao = InSurface.b;

    vec3 N = Normalize(InNormal);
    vec3 V = Normalize(CameraPosition - InWorldPos);

    vec3 F0 = vec3(0.04f);
    F0 = mix(F0, InAlbedo, metallic);

    // Calculate per-light radiance
    vec3 diff = InLightPos - InWorldPos;
    float distance = FastLength(diff);
    vec3 L = diff / distance;
    vec3 H = Normalize(V + L);
    float attenuation = AttenuationFunction(distance, InLightRange);
    vec3 radiance = InLightColor * attenuation;

    // cook-torrance brdf
    float NDF = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);

    // Calculate fresnel
    vec3 F = FresnelSchlickRoughness(max(dot(H, V), 0.0f), F0, roughness);
    vec3 kD = vec3(1.0f) - F; // kS = F
    kD *= 1.0f - metallic;

    vec3 numerator = NDF * G * F;
    float denominator = 4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f) + 0.0001f;
    vec3 specular = numerator / denominator;

    // Add to outgoing radiance Lo
    float NdotL = max(dot(N, L), 0.0f);
    return (kD * InAlbedo / PI + specular) * radiance * NdotL;
}