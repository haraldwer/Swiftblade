#version 330

#include "Shaders/SH_FrameUniforms.si"
#include "Shaders/SH_TextureUniforms.si"

in vec2 TexCoord;
out vec4 Output;

const int ssaoIterations = 12;
const float ssaoIntensity = 0.5f;
const float ssaoScale = 1.0f;
const float ssaoBias = 0.2f;
const float ssaoSampleRad = 2.0f;

const vec3 mod3 = vec3(.1031,.11369,.13787);

float SSAOHash12(vec2 p)
{
     vec3 p3  = fract(vec3(p.xyx) * mod3);
     p3 += dot(p3, p3.yzx + 19.19f);
     return fract((p3.x + p3.y) * p3.z);
}

vec2 SSAOHash22(vec2 p)
{
     vec3 p3 = fract(vec3(p.xyx) * mod3);
     p3 += dot(p3, p3.yzx + 19.19f);
     return fract(vec2((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y));
}

vec3 SSAOPosition(vec2 uv)
{
     return texture(TexPosition, uv).xyz;
}

vec3 SSAONormal(vec2 uv)
{
     return texture(TexNormal, uv).xyz;
}

float SSAOIteration(vec2 tcoord, vec2 uv, vec3 position, vec3 cnorm)
{
     vec3 diff = SSAOPosition(tcoord + uv) - position;
     float l = length(diff);
     vec3 v = diff / l;
     float d = l * ssaoScale;
     float ao = clamp(dot(cnorm, v) - ssaoBias, 0.0, 1.0) * (1.0f / (1.0f + d));
     return ao;
}

float SSAO()
{
     vec3 p = SSAOPosition(TexCoord);
     float depth = p.z;
     float iterations = ssaoIterations;
     if(iterations < 1.0f)
          return 0.0f;

     float goldenAngle = 2.4f;
     float inv = 1.0f / iterations;
     float rad = ssaoSampleRad / depth;
     float rStep = inv * rad;
     vec3 n = SSAONormal(TexCoord);

     float rotatePhase = SSAOHash12( TexCoord * 100.0f * Time) * 6.28;
     float radius = 0.0f;
     float ao = 0.0f;
     vec2 spiralUV = vec2(0.0f, 0.0f);

     for (int j = 0; j < iterations; ++j)
     {
          spiralUV = vec2(cos(rotatePhase), sin(rotatePhase));
          radius += rStep;
          ao += SSAOIteration(TexCoord, spiralUV * radius, p, n);
          rotatePhase += goldenAngle;
     }
     float finalAO = clamp(ao * ssaoIntensity * inv * (iterations / ssaoIterations), 0.0, 1.0);
     return finalAO * finalAO;
}

vec2 ScreenPosToCoord(vec3 InScreenPos)
{
     return (InScreenPos.xy / InScreenPos.z) * vec2(0.5) + vec2(0.5);
}

vec2 GetPreviousScreenCoord()
{
     vec3 screenPos = texture(TexScreenPosition, TexCoord).xyz;
     vec4 prevScreenPos = WorldToPrevScreen * vec4(texture(TexPosition, TexCoord).xyz, 1.0);
     vec2 prevCoords = ScreenPosToCoord(prevScreenPos.xyz);
     return clamp(prevCoords, 0.001, 0.999);
}

void main()
{ 
     float new = SSAO();
     float prev = texture(TexAO, GetPreviousScreenCoord()).r;
     
     Output = vec4(0.0, 0.0, 0.0, 1.0);
     
     float l = 0.001;
     Output.r = new * l + prev * (1.0 - l);
     Output.g = prev * 100;
     Output.b = new * 100;
}
