
#include "Shaders/SH_FrameUniforms.si"
#include "Shaders/SH_TextureUniforms.si"

#include "Shaders/SH_Random.si"

// Convert screen coordinate to pixel position
// Sample pixel position
// Sample from pixel to current until finding a good match 
// Is pixel position different from original position?

const float PIXELS = 8.0f;
const float PIXEL_DEPTH_STEP = 10.0f;
const float PIXEL_MAX_DIST = 0.05f;
const float PIXEL_DEPTH_OFFSET_SCALE = 1.5f;
const float PIXEL_DEPTH_NOISE_SCALE = 0.8f;

float CalculatePixelSize(vec3 InWorldPos)
{
    float depthOffset = SimplexNoise3D(InWorldPos * PIXEL_DEPTH_NOISE_SCALE);
    float depth = texture(TexScreenPosition, TexCoord).z;
    depth += depthOffset * PIXEL_DEPTH_OFFSET_SCALE;
    depth = max(depth, 0.001);
    float stepDepth = ceil(depth / PIXEL_DEPTH_STEP) * PIXEL_DEPTH_STEP;
    return PIXELS * stepDepth;
}

vec4 PixelizeTexCoord()
{
    vec3 originalWorldPosition = texture(TexPosition, TexCoord).xyz;
    vec2 pixelSize = vec2(CalculatePixelSize(originalWorldPosition));
    float aspect = Resolution.x / Resolution.y;
    pixelSize.x *= aspect;

    // Calculate pixel screen position
    vec2 screenPos = TexCoord * pixelSize;
    vec2 pixelPos = vec2(
        round(screenPos.x),
        round(screenPos.y)
    );

    // Calculate pixel coord
    vec2 pixelCoord = vec2(
        pixelPos.x / pixelSize.x,
        pixelPos.y / pixelSize.y
    );

    // Find valid coord 
    int steps = 4;
    vec2 diff = pixelCoord - TexCoord;
    vec2 stepSize = diff / steps;
    vec2 finalPixelCoord = TexCoord;
    finalPixelCoord = TexCoord;
    for (int i = 0; i < steps; i++)
    {
        vec2 coord = pixelCoord + (stepSize * i);
        vec3 pos = texture(TexPosition, coord).xyz;
        vec3 dist = pos - originalWorldPosition;
        if (abs(dist.x) < PIXEL_MAX_DIST ||
        abs(dist.y) < PIXEL_MAX_DIST ||
        abs(dist.z) < PIXEL_MAX_DIST)
        {
            finalPixelCoord = coord;
            break;
        }
    }
    return vec4(finalPixelCoord, pixelSize);
}
