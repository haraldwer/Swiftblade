#version 330

#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_Random.si"
#include "Shaders/Utility/SH_Utility.si"

in vec2 TexCoord;
out vec4 Output;

const int ITERATIONS = 4;
const float INTENSITY = 0.08f;
const float RADIUS = 0.5f;
const float SAMPLE_DISTANCE_SCALE = 1.0f;
const float SAMPLE_DISTANCE_BIAS = 0.05f;
const float SAMPLE_NORMAL_BIAS = 0.1f;
const float NEAR_START_FADE = 3.0;
const float NEAR_END_FADE = 5.0;

const float POSITION_THRESHOLD = 1.0;
const float DEPTH_THRESHOLD = 1.0;
const float LERP_SPEED = 20.0;
const float MERGE_WEIGHT_CURR = 3.0;
const float MERGE_WEIGHT_PREV = 2.0;
const float MERGE_WEIGHT_PREV_PREV = 1.0;

vec3 SSAOPosition(vec2 uv)
{
     return texture(TexPosition, uv).xyz;
}

vec3 SSAONormal(vec2 uv)
{
     return texture(TexNormal, uv).xyz;
}

float SSAODepthSqr(vec3 InPos)
{
     vec3 diff = InPos - CameraPosition;
     return diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
}

float SSAOIteration(vec2 InCoord, vec2 InOffset, vec3 InStartPosition, vec3 InStartNormal, float InStartDepthSqr)
{
     vec2 coord = clamp(InCoord + InOffset, 0.0001, 0.9999);
     vec3 pos = SSAOPosition(coord);
     
     // Depth test
     float depthSqr = SSAODepthSqr(pos);
     if (InStartDepthSqr < depthSqr || depthSqr < NEAR_START_FADE * NEAR_START_FADE)
          return 0.0;
     
     vec3 diff = SSAOPosition(coord) - InStartPosition;

     // Position
     float distance = length(diff);
     float distPart = (1.0f / (1.0f + distance)) * SAMPLE_DISTANCE_SCALE;
     distPart *= clamp((distance / SAMPLE_DISTANCE_BIAS) - SAMPLE_DISTANCE_BIAS, 0.0, 1.0);
     
     // Normal
     vec3 direction = diff / distance;
     float normalDot = clamp(dot(InStartNormal, direction) - SAMPLE_NORMAL_BIAS, 0.0, 1.0);

     return clamp(normalDot * distPart, 0.0, 1.0);
}

float SSAO()
{
     vec3 startPosition = SSAOPosition(TexCoord);
     vec3 startNormal = SSAONormal(TexCoord);
     float startDepthSqr = SSAODepthSqr(startPosition);
     float startDepth = sqrt(startDepthSqr);
     
     float inv = 1.0f / ITERATIONS;
     float rStep = inv * RADIUS / startDepth;
     
     float ao = 0.0f;
     float radius = 0.0f;
     for (int j = 0; j < ITERATIONS; ++j)
     {
          radius += rStep;
          vec2 uv = (Random2(TexCoord + radius + Time) - 0.5) * 2.0;
          ao += SSAOIteration(TexCoord, uv * radius, startPosition, startNormal, startDepthSqr); 
     }    
     float finalAO = clamp(ao * INTENSITY * inv, 0.0, 1.0);
     return finalAO;
}

void main()
{
     float ssao = SSAO();
     
     vec4 currPos = texture(TexPosition, TexCoord);
     float currDepth = currPos.w;
     float fade = clamp((currDepth - NEAR_START_FADE) / (NEAR_END_FADE - NEAR_START_FADE), 0.0, 1.0);
     
     float accumulated = 0.0;
     float prev = 0.0;
     float prevPrev = 0.0;
     vec2 prevCoord = GetPrevCoord(currPos.xyz);
     vec4 prevPos = texture(TexPosition, prevCoord);
     if (prevPos.w - currDepth < DEPTH_THRESHOLD)
     { 
          float diff = length(currPos.xyz - prevPos.xyz);
          if (diff < POSITION_THRESHOLD)
          {
               vec4 val = texture(TexAO, prevCoord).rgba;
               accumulated = val.g;
               prev = val.b;
               prevPrev = val.a;
          }
     }
     
     Output = vec4(vec3(0.0), 1.0);
     
     float merged = max(max(ssao, prev), prevPrev);
     
     float accLerp = clamp(LERP_SPEED * Delta, 0.0f, 1.0f);
     accumulated = merged * accLerp + accumulated * (1.0f - accLerp);
     
     // Accumulate
     // Also, merge current and previous
     // Show max
     
     Output.r = mix(merged, accumulated, 0.8f);
     Output.r *= fade; // Fade is a post-thing
     
     // For next frame:
     Output.g = accumulated; // Store accumulated
     Output.b = ssao; // Store as prev
     Output.a = prev; // Store as prevPrev
}
