#version 330

#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Utility/SH_DeferredID.si"
#include "Shaders/Utility/SH_Utility.si"
#include "Shaders/Utility/SH_Random.si"

uniform sampler2D TexFire;

in vec2 TexCoord;
out vec4 Output;

const float TOTAL_LIFETIME = 0.1;
const int VEL_SAMPLES = 8; 
const float VEL_SCALE = 2;
const float VEL_UP_SPEED = -3;
const float SPEED_LIFETIME_DECREASE = 2;

void main()
{
    // Deferred G -> Original lifetime?? Effect type??
    // Grow fire

    vec4 worldPosition = texture(TexPosition, TexCoord);
    vec4 deferredData = texture(TexDeferredData, TexCoord);
    
    // Assume camera distance? 
    vec3 cameraDiff = worldPosition.xyz - CameraPosition;
    vec3 cameraDir = cameraDiff / length(cameraDiff);
    vec3 setDist = CameraPosition + cameraDir * 2.0f;
    
    vec4 fire = vec4(0.0);
    float lifetime = deferredData.g;
    
    // Velocity sample
        
    vec3 velocity = Voronoi(TexCoord, Time) * VEL_SCALE + vec3(0.0, VEL_UP_SPEED, 0.0);
    vec2 prevCoord = GetPrevCoord(setDist + velocity * Delta);
    vec2 velPart = (prevCoord - TexCoord) / VEL_SAMPLES;
    for (int i = 0; i < VEL_SAMPLES; i++)
    {
        vec2 coord = TexCoord + velPart * i;
        vec4 velFire = texture(TexFire, coord);
        if (velFire.a > lifetime)
        {
            fire = velFire;
            lifetime = velFire.a;
        }
    }

    lifetime -= Delta / TOTAL_LIFETIME;
    lifetime -= Delta * length(velocity) * SPEED_LIFETIME_DECREASE;
    lifetime = clamp(lifetime, 0.0, 1.0); 
    
    if (lifetime < 0.05f)
        discard;
    
    Output.rgb = vec3(0.5f);
    Output.a = lifetime;
}