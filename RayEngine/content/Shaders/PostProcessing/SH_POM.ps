#include "Shaders/Uniforms/SH_FrameUniforms.si"
#include "Shaders/Uniforms/SH_TexUniforms.si"
#include "Shaders/Uniforms/SH_DeferredOut.si"
#include "Shaders/Utility/SH_DeferredID.si"
#include "Shaders/Utility/SH_Utility.si"

in vec2 TexCoord;
in vec2 RectCoord;
out vec3 Output;

const int MIN_PARALLAX_SAMPLES = 2;
const int MAX_PARALLAX_SAMPLES = 32;
const float PARALLAX_SCALE = 0.001;

vec3 GetSurfaceDirection(vec2 InCoord, vec2 InDir, vec3 InWorldPos)
{
    vec2 texel = vec2(1) / Resolution;
    vec2 coord = InCoord + texel * InDir;
    return normalize(InWorldPos - SampleWorldPos(coord).xyz);
}

struct ParallaxOffset
{
    vec3 worldPos;
    vec2 uv;
};

ParallaxOffset ParallaxOcclusion(float InHeight, vec4 InPos, vec3 InNormal)
{
    // Get surface directions
    vec3 worldPos = InPos.xyz + CameraPosition;
    vec3 right = GetSurfaceDirection(TexCoord, vec2(1, 0), worldPos);
    vec3 up = GetSurfaceDirection(TexCoord, vec2(0, 1), worldPos);
    vec3 forward = cross(right, up);
    
    // First, get the direction
    float camDist = length(InPos.xyz);
    float camLerp = clamp((camDist - NearFar.x) / NearFar.y, 0.1, 1);
    vec3 camDir = -normalize(InPos.xyz);
    mat3 tanMat = mat3(-up, right, forward);
    vec3 viewDir = camDir * tanMat;
    vec3 viewDirTS = viewDir.yxz;
    vec2 maxOffset = vec2(viewDirTS.x, -viewDirTS.y) * PARALLAX_SCALE / camLerp;
    
    // TODO: Steps depends on angle
    float surfaceDot = max(0, dot(InNormal, camDir));
    float sampleLerp = mix(MIN_PARALLAX_SAMPLES, MAX_PARALLAX_SAMPLES, 1 - surfaceDot);
    int samples = int(sampleLerp); 
    
    vec2 step = maxOffset / samples;
    float heightStep = 1.0 / samples;
    
    //return offset;

    vec2 coord = TexCoord;
    float rayHeight = 0.0;
    float depth = InPos.w; 
    
    for (int i = 1; i < samples; i++)
    {
        vec2 nextCoord = clamp(TexCoord + step * i, 0.001, 0.999);
        float nextDepth = texture(TexPosition, nextCoord).w;
        float depthDiff = depth - nextDepth;
        if (depthDiff > 0.1)
            break;
        
        coord = nextCoord;
        rayHeight = heightStep * i;
        depth = nextDepth;
        
        float surfaceHeight = texture(TexData, coord).z;
        vec3 normal = texture(TexNormal, coord).xyz;
        float nd = max(0, dot(normal, InNormal));
        
        if (rayHeight > surfaceHeight * nd)
            break;
    }

    ParallaxOffset offset;
    offset.uv = coord;
    offset.worldPos = SampleWorldPos(coord).xyz - up * rayHeight * PARALLAX_SCALE;
    
    return offset; 
}

void main()
{
    // Copy data
    OutPosition = texture(TexPosition, TexCoord);
    OutNormal = texture(TexNormal, TexCoord);
    OutData = texture(TexData, TexCoord);
    
    if (!CheckID(TexCoord, 0)) // Exclude skybox
        return;    
    
    // Parallax occlusion mapping
    ParallaxOffset offset = ParallaxOcclusion(OutData.z, OutPosition.xyzw, OutNormal.xyz);
    
    // Update buffer values
    OutPosition.xyz = offset.worldPos - CameraPosition;
    OutNormal = texture(TexNormal, offset.uv);
    OutData = texture(TexData, offset.uv);
}